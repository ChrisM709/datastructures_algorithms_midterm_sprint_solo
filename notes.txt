created the project structure to get a basic setup and plan how I will approach this project.
pushed the initial structure to GitHub.

------------------------------------------------

built a menu placeholder in Main.java to map out the project flow.
set maxUsers = 10 to keep the scope small; userCount starts at 0, so we begin with no users.
used a Scanner for menu input and a boolean flag to shut down the program when “Exit” is chosen.
added an “Invalid option” message for wrong inputs and left private methods at the bottom as placeholders for each feature.

------------------------------------------------

created the TaskList class next because users need to be able to add tasks to a list and it made sense to build that before anything else.
defined a private Node inner class that holds a Task and a reference to the next node. head points to the first node (or is null if empty) and size keeps track of how many tasks are in the list.
in addTask(), wrapped the new Task in a Node. if the list is empty, that node becomes head; otherwise traversed to the end and linked the new node there. after inserting, incremented size.
left placeholders for markCompleted(int position) and printTasks() to handle marking tasks done and printing them in order, and included getSize() so other parts of the program can easily check how many tasks are stored.

------------------------------------------------

this morning I implemented the Task class because both TaskList and User that I created last night depends on it, this seemed like the next best step so I did the following
created a constructor that takes a description and initializes completed to false for later changing if a task is done or not
added markCompleted() to update the task status once done, plus getters for description and isCompleted().
overrode toString() so printing a task shows “[ ] Description” or “[x] Description” based on its state.
can tweak the formatting later if I want a different look.

------------------------------------------------

created the User class next because I needed a way to tie a username to its TaskList.
defined a constructor that takes the user’s name and initializes a new TaskList.
added getName() to retrieve the user’s name.
added addTask(String description) to create and add a new Task.
added markTaskCompleted(int index) to mark a specific task as completed.
added printTasks() to display all current tasks for that user.

------------------------------------------------

after I finished the User.java I think my next thing to do would be to complete my main functions
completed the createUser() class I had a place holder for in the Main.java
it accepts a username and removes the extra spaces at the end 
looks through existing users to see if there are any matches
if it matches return, if not create a new user
print line to confirm creation

------------------------------------------------

implemented the addTaskToUser() method in Main.java to let a user add tasks.  
listed current users with their indices so you can pick one.  
prompted for and read the selected user number.  
prompted for a task description and trimmed extra spaces.  
called users[userIndex].addTask(desc) to add the new Task to the chosen user’s TaskList. 

------------------------------------------------

implemented TaskList.printTasks() in TaskList.java would come next as I will need to show the tasks when a user tries to print them in the Main.java
checks if the list is empty and prints “No tasks to show.”  
iterates from head through each node, printing the task index and Task.toString()  

------------------------------------------------

added viewUserTasks() in Main.java:  
ensures at least one user exists before proceeding  
lists all users with their indices and prompts for a selection  
parses the chosen index and calls users[userIndex].printTasks() to display that user’s tasks

------------------------------------------------

implemented markCompleted(int position) in TaskList.java:
traversed from head through the list to reach the target node, then called task.markCompleted().  
printed a confirmation that the task was marked as completed.

------------------------------------------------

added markTaskCompleted() in Main.java:   
listed all users with indices and prompted for a user number.  
displayed the selected user’s tasks.  
prompted for which task number to mark completed and read the input.  
called users[userIndex].markTaskCompleted(taskIndex) to update the task status.

------------------------------------------------

Added testing files on last commit now adding error handing 
In Main, Made it so it throws en error if they try to make more users then specified 
if a user tries to add a task to a user and none are created yet, it returns to the menu with the message 'No users have been created yet. Please add a user first.'
if a user tries to add a blank task to a user it tells you it cannot be blank

------------------------------------------------

more error handing so that when a user tries to enter a blank username is returns with an error message that is cannot be blank